import { z } from "zod"
import type { CustomGenerators, TypeRegistry } from "./types"
import { createMockDataFromZodSchema } from "./generator"

/**
 * Creates a fully type-safe mock data generator based on a provided Zod schema registry.
 * This function is the entry point for using Zomoc's standalone generator.
 * @description 제공된 Zod 스키마 레지스트리를 기반으로, 완벽하게 타입이 보장되는 Mock 데이터 생성기를 만듭니다.
 * 이 함수는 Zomoc의 독립 실행형 생성기를 사용하기 위한 진입점입니다.
 *
 * @param typeRegistry - A map where keys are interface names (e.g., 'IUser') and values are the corresponding Zod schemas.
 * This is typically the `finalSchemaTypeMap` generated by Zomoc's core engine.
 * @param customGenerators - Optional custom data generators to override default behavior.
 * @returns A `getZomocGenerator` function, ready to create mock data.
 */
export function createGenerator<T extends TypeRegistry>(
  typeRegistry: T,
  customGenerators?: CustomGenerators
) {
  /**
   * Generates mock data for a given TypeScript interface name.
   * It provides full type-safety and IDE autocompletion for `typeName` based on the provided registry.
   * The return type is also automatically inferred from the corresponding Zod schema.
   * @description 주어진 타입스크립트 인터페이스 이름에 대한 Mock 데이터를 생성합니다.
   * 제공된 레지스트리를 기반으로 `typeName`에 대한 완벽한 타입 안전성과 IDE 자동 완성을 지원합니다.
   * 반환 타입 또한 Zod 스키마로부터 자동으로 추론됩니다.
   *
   * @example
   * const getMock = createGenerator(finalSchemaTypeMap);
   * const user = getMock('IUser'); // `user` is correctly typed as `IUser`
   *
   * @param typeName - The name of the interface to generate mock data for (e.g., 'IUser').
   * @param options - Optional parameters for generation, such as pagination, repeatCount, or strategy.
   * @returns The generated mock data, correctly typed to match the interface.
   */
  function getZomocGenerator<K extends keyof T>(
    typeName: K,
    options: {
      pagination?: {
        itemsKey: string
        totalKey: string
        pageKey?: string
        sizeKey?: string
      }
      repeatCount?: number
      strategy?: "fixed" | "random"
      page?: number
      size?: number
    } = {}
  ): z.infer<T[K]> {
    const schema = typeRegistry[typeName]

    // This runtime check is a safeguard.
    // Static analysis by TypeScript should prevent this function from being called with a `typeName` that doesn't exist in the registry.
    // @description 이 런타임 체크는 안전장치입니다.
    // TypeScript의 정적 분석이 레지스트리에 존재하지 않는 `typeName`으로 이 함수가 호출되는 것을 막아줄 것입니다.
    if (!schema) {
      throw new Error(
        `[Zomoc] The type "${String(
          typeName
        )}" is not registered. Please check your mock.json files.`
      )
    }

    const { pagination, page = 1, size = 10, repeatCount, strategy } = options

    let mockData
    // Handle paginated data generation
    // @description 페이지네이션 데이터 생성 처리
    if (pagination) {
      const itemSchema = (schema as any).shape[pagination.itemsKey]
      const pageData = createMockDataFromZodSchema(
        itemSchema,
        String(typeName),
        customGenerators,
        size,
        page,
        strategy
      )
      mockData = {
        [pagination.itemsKey]: pageData,
        [pagination.totalKey]: 100, //  Dummy total
        [pagination.pageKey ?? "page"]: page,
        [pagination.sizeKey ?? "size"]: size,
      }
    } else {
      // Handle non-paginated, standard data generation
      // @description 페이지네이션이 아닌 일반 데이터 생성 처리
      mockData = createMockDataFromZodSchema(
        schema,
        String(typeName),
        customGenerators,
        repeatCount,
        0, // page is not relevant here
        strategy
      )
    }

    // The return type is already defined in the function signature using `z.infer`.
    // This `as` cast assures TypeScript that `mockData` conforms to that inferred type.
    // @description 반환 타입은 이미 함수 시그니처에서 `z.infer`를 통해 정의되었습니다.
    // 이 `as` 캐스팅은 `mockData`가 그 추론된 타입을 따른다고 TypeScript에 확신시켜주는 역할을 합니다.
    return mockData as z.infer<T[K]>
  }

  return getZomocGenerator
}

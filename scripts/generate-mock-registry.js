// scripts/generate-mock-registry.js
import { glob } from "glob"
import fs from "fs"
import path from "path"

// 이 스크립트는 이제 사용자의 프로젝트 루트에서 실행되는 것을 가정합니다.
const projectRoot = process.cwd()
const outputPath = path.resolve(projectRoot, "mock.registry.ts")
const zodSchemaPattern = "**/*.zod.ts"
const mockMapPattern = "**/mock.json"

async function generateRegistry() {
  console.log("[Registry Gen] Starting registry generation...")

  // 1. 모든 Zod 스키마 파일과 mock.json 파일을 찾습니다.
  const zodFiles = await glob(zodSchemaPattern, {
    cwd: projectRoot,
    absolute: true,
    ignore: "node_modules/**",
  })
  const mockFiles = await glob(mockMapPattern, {
    cwd: projectRoot,
    absolute: true,
    ignore: "node_modules/**",
  })
  console.log(
    `[Registry Gen] Found ${zodFiles.length} zod schema files and ${mockFiles.length} mock map files.`
  )

  if (mockFiles.length === 0) {
    fs.writeFileSync(
      outputPath,
      `// Auto-generated by script. No mock files found.\nexport const finalSchemaUrlMap = {};\n`
    )
    console.log("[Registry Gen] No mock maps found. Created an empty registry.")
    return
  }

  // 2. 모든 Zod 스키마를 import하는 구문과, 하나의 객체로 합치는 코드를 생성합니다.
  const schemaImports = zodFiles
    .map((file, i) => {
      // outputPath 기준 상대 경로 계산, .ts 제거 및 .js 추가
      let relativePath = path.relative(path.dirname(outputPath), file).replace(/\\/g, "/")
      if (relativePath.endsWith(".ts")) {
        relativePath = relativePath.slice(0, -3) + ".js"
      }
      return `import * as schema${i} from '${relativePath}';`
    })
    .join("\n")
  const masterSchemaPool = `const allSchemas = {\n${zodFiles
    .map((_, i) => `  ...schema${i},`)
    .join("\n")}\n};`

  // 3. 모든 mock.json 파일을 직접 읽어, JSON.parse로 파싱하여 합칩니다.
  let combinedUrlMap = {}
  for (const file of mockFiles) {
    try {
      const content = fs.readFileSync(file, "utf-8")
      const mapObject = JSON.parse(content)
      combinedUrlMap = { ...combinedUrlMap, ...mapObject }
    } catch (e) {
      console.error(`[Registry Gen] Error parsing mock.json file ${file}:`, e)
    }
  }

  // 4. 최종적으로 URL을 키로, 실제 Zod 스키마 객체를 값으로 갖는 최종 맵을 생성합니다.
  const finalMapEntries = Object.entries(combinedUrlMap)
    .map(([url, schemaName]) => `  '${url}': allSchemas['${schemaName}'],`)
    .join("\n")
  const finalMap = `\nexport const finalSchemaUrlMap = {\n${finalMapEntries}\n};`

  // 5. 모든 조각을 합쳐 mock.registry.ts 파일에 씁니다.
  const fileContent =
    `// This file is auto-generated by a script. Do not edit directly.\n` +
    `// It combines all mock.json files and maps URLs to Zod schema objects.\n\n` +
    `${schemaImports}\n\n${masterSchemaPool}\n${finalMap}\n`

  fs.writeFileSync(outputPath, fileContent)
  console.log(
    `[Registry Gen] Successfully generated mock registry at: ${outputPath}`
  )
}

generateRegistry().catch(console.error)
